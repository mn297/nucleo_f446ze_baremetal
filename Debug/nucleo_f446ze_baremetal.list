
nucleo_f446ze_baremetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000274  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000438  08000440  00010440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000438  08000438  00010440  2**0
                  CONTENTS
  4 .ARM          00000000  08000438  08000438  00010440  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000438  08000440  00010440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000438  08000438  00010438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800043c  0800043c  0001043c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000440  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000440  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010440  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000430  00000000  00000000  00010470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000102  00000000  00000000  000108a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000050  00000000  00000000  000109a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000038  00000000  00000000  000109f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a0e  00000000  00000000  00010a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000053a  00000000  00000000  0002943e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ad2e  00000000  00000000  00029978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b46a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000007c  00000000  00000000  000b46f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000420 	.word	0x08000420

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000420 	.word	0x08000420

08000204 <main>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
*/
void SysClock_init(void);
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
	SysClock_init();
 800020a:	f000 f83d 	bl	8000288 <SysClock_init>
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800020e:	4b1b      	ldr	r3, [pc, #108]	; (800027c <main+0x78>)
 8000210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000212:	4a1a      	ldr	r2, [pc, #104]	; (800027c <main+0x78>)
 8000214:	f043 0302 	orr.w	r3, r3, #2
 8000218:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOB->MODER |= 1U << GPIO_MODER_MODER14_Pos; // general output B14
 800021a:	4b19      	ldr	r3, [pc, #100]	; (8000280 <main+0x7c>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a18      	ldr	r2, [pc, #96]	; (8000280 <main+0x7c>)
 8000220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000224:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT14_Msk; //clean
 8000226:	4b16      	ldr	r3, [pc, #88]	; (8000280 <main+0x7c>)
 8000228:	685b      	ldr	r3, [r3, #4]
 800022a:	4a15      	ldr	r2, [pc, #84]	; (8000280 <main+0x7c>)
 800022c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000230:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= 0U << GPIO_OTYPER_OT14_Pos; // unnecessary?
 8000232:	4b13      	ldr	r3, [pc, #76]	; (8000280 <main+0x7c>)
 8000234:	4a12      	ldr	r2, [pc, #72]	; (8000280 <main+0x7c>)
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	6053      	str	r3, [r2, #4]

	while(1){
		GPIOB->ODR |= GPIO_ODR_ODR_14;
 800023a:	4b11      	ldr	r3, [pc, #68]	; (8000280 <main+0x7c>)
 800023c:	695b      	ldr	r3, [r3, #20]
 800023e:	4a10      	ldr	r2, [pc, #64]	; (8000280 <main+0x7c>)
 8000240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000244:	6153      	str	r3, [r2, #20]
		for (int i=0;i<500000;i++);
 8000246:	2300      	movs	r3, #0
 8000248:	607b      	str	r3, [r7, #4]
 800024a:	e002      	b.n	8000252 <main+0x4e>
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	3301      	adds	r3, #1
 8000250:	607b      	str	r3, [r7, #4]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a0b      	ldr	r2, [pc, #44]	; (8000284 <main+0x80>)
 8000256:	4293      	cmp	r3, r2
 8000258:	ddf8      	ble.n	800024c <main+0x48>
		GPIOB->ODR &= ~GPIO_ODR_ODR_14;
 800025a:	4b09      	ldr	r3, [pc, #36]	; (8000280 <main+0x7c>)
 800025c:	695b      	ldr	r3, [r3, #20]
 800025e:	4a08      	ldr	r2, [pc, #32]	; (8000280 <main+0x7c>)
 8000260:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000264:	6153      	str	r3, [r2, #20]
		for (int i=0;i<500000;i++);
 8000266:	2300      	movs	r3, #0
 8000268:	603b      	str	r3, [r7, #0]
 800026a:	e002      	b.n	8000272 <main+0x6e>
 800026c:	683b      	ldr	r3, [r7, #0]
 800026e:	3301      	adds	r3, #1
 8000270:	603b      	str	r3, [r7, #0]
 8000272:	683b      	ldr	r3, [r7, #0]
 8000274:	4a03      	ldr	r2, [pc, #12]	; (8000284 <main+0x80>)
 8000276:	4293      	cmp	r3, r2
 8000278:	ddf8      	ble.n	800026c <main+0x68>
		GPIOB->ODR |= GPIO_ODR_ODR_14;
 800027a:	e7de      	b.n	800023a <main+0x36>
 800027c:	40023800 	.word	0x40023800
 8000280:	40020400 	.word	0x40020400
 8000284:	0007a11f 	.word	0x0007a11f

08000288 <SysClock_init>:
	}
}

void SysClock_init(void){
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
	//HSE ON
	RCC->CR |= RCC_CR_HSEON;
 800028c:	4b3b      	ldr	r3, [pc, #236]	; (800037c <SysClock_init+0xf4>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a3a      	ldr	r2, [pc, #232]	; (800037c <SysClock_init+0xf4>)
 8000292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000296:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY)); //block until HSE rdy
 8000298:	bf00      	nop
 800029a:	4b38      	ldr	r3, [pc, #224]	; (800037c <SysClock_init+0xf4>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0f9      	beq.n	800029a <SysClock_init+0x12>

	//FLASH
	FLASH->ACR |= FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_5WS;
 80002a6:	4b36      	ldr	r3, [pc, #216]	; (8000380 <SysClock_init+0xf8>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a35      	ldr	r2, [pc, #212]	; (8000380 <SysClock_init+0xf8>)
 80002ac:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 80002b0:	f043 0301 	orr.w	r3, r3, #1
 80002b4:	6013      	str	r3, [r2, #0]

	// APB1, APB2, AHB prescaler
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE1_DIV4 | RCC_CFGR_PPRE2_DIV2;
 80002b6:	4b31      	ldr	r3, [pc, #196]	; (800037c <SysClock_init+0xf4>)
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	4a30      	ldr	r2, [pc, #192]	; (800037c <SysClock_init+0xf4>)
 80002bc:	f443 4314 	orr.w	r3, r3, #37888	; 0x9400
 80002c0:	6093      	str	r3, [r2, #8]

	// CONFIGURE PLL
	// turn on
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE; // PLL source MUX
 80002c2:	4b2e      	ldr	r3, [pc, #184]	; (800037c <SysClock_init+0xf4>)
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	4a2d      	ldr	r2, [pc, #180]	; (800037c <SysClock_init+0xf4>)
 80002c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002cc:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM_Msk); // clean PLLM
 80002ce:	4b2b      	ldr	r3, [pc, #172]	; (800037c <SysClock_init+0xf4>)
 80002d0:	685b      	ldr	r3, [r3, #4]
 80002d2:	4a2a      	ldr	r2, [pc, #168]	; (800037c <SysClock_init+0xf4>)
 80002d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80002d8:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (4U << RCC_PLLCFGR_PLLM_Pos); //PLLM, div factor
 80002da:	4b28      	ldr	r3, [pc, #160]	; (800037c <SysClock_init+0xf4>)
 80002dc:	685b      	ldr	r3, [r3, #4]
 80002de:	4a27      	ldr	r2, [pc, #156]	; (800037c <SysClock_init+0xf4>)
 80002e0:	f043 0304 	orr.w	r3, r3, #4
 80002e4:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLN_Msk); // clean PLLN
 80002e6:	4b25      	ldr	r3, [pc, #148]	; (800037c <SysClock_init+0xf4>)
 80002e8:	685b      	ldr	r3, [r3, #4]
 80002ea:	4a24      	ldr	r2, [pc, #144]	; (800037c <SysClock_init+0xf4>)
 80002ec:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80002f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002f4:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (168U << RCC_PLLCFGR_PLLN_Pos); // PLLN, mul factor for VCO
 80002f6:	4b21      	ldr	r3, [pc, #132]	; (800037c <SysClock_init+0xf4>)
 80002f8:	685b      	ldr	r3, [r3, #4]
 80002fa:	4a20      	ldr	r2, [pc, #128]	; (800037c <SysClock_init+0xf4>)
 80002fc:	f443 5328 	orr.w	r3, r3, #10752	; 0x2a00
 8000300:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (0U << RCC_PLLCFGR_PLLP_Pos); //PLLP 00=2
 8000302:	4b1e      	ldr	r3, [pc, #120]	; (800037c <SysClock_init+0xf4>)
 8000304:	4a1d      	ldr	r2, [pc, #116]	; (800037c <SysClock_init+0xf4>)
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (7U << RCC_PLLCFGR_PLLQ_Pos); //PLLQ
 800030a:	4b1c      	ldr	r3, [pc, #112]	; (800037c <SysClock_init+0xf4>)
 800030c:	685b      	ldr	r3, [r3, #4]
 800030e:	4a1b      	ldr	r2, [pc, #108]	; (800037c <SysClock_init+0xf4>)
 8000310:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000314:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (7U << RCC_PLLCFGR_PLLQ_Pos); //PLLQ
 8000316:	4b19      	ldr	r3, [pc, #100]	; (800037c <SysClock_init+0xf4>)
 8000318:	685b      	ldr	r3, [r3, #4]
 800031a:	4a18      	ldr	r2, [pc, #96]	; (800037c <SysClock_init+0xf4>)
 800031c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000320:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (7U << RCC_PLLCFGR_PLLQ_Pos); //PLLQ
 8000322:	4b16      	ldr	r3, [pc, #88]	; (800037c <SysClock_init+0xf4>)
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	4a15      	ldr	r2, [pc, #84]	; (800037c <SysClock_init+0xf4>)
 8000328:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800032c:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (2U << RCC_PLLCFGR_PLLR_Pos); //PLLR
 800032e:	4b13      	ldr	r3, [pc, #76]	; (800037c <SysClock_init+0xf4>)
 8000330:	685b      	ldr	r3, [r3, #4]
 8000332:	4a12      	ldr	r2, [pc, #72]	; (800037c <SysClock_init+0xf4>)
 8000334:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000338:	6053      	str	r3, [r2, #4]

	// turn on PLL
	RCC->CR |= RCC_CR_PLLON;
 800033a:	4b10      	ldr	r3, [pc, #64]	; (800037c <SysClock_init+0xf4>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a0f      	ldr	r2, [pc, #60]	; (800037c <SysClock_init+0xf4>)
 8000340:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000344:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY)); //block until PLL rdy
 8000346:	bf00      	nop
 8000348:	4b0c      	ldr	r3, [pc, #48]	; (800037c <SysClock_init+0xf4>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d0f9      	beq.n	8000348 <SysClock_init+0xc0>

	// SYSTEM MUX source = PLLCLK
	RCC->CFGR |= RCC_CFGR_SW_PLL; // System clock MUX source = PLLCLK
 8000354:	4b09      	ldr	r3, [pc, #36]	; (800037c <SysClock_init+0xf4>)
 8000356:	689b      	ldr	r3, [r3, #8]
 8000358:	4a08      	ldr	r2, [pc, #32]	; (800037c <SysClock_init+0xf4>)
 800035a:	f043 0302 	orr.w	r3, r3, #2
 800035e:	6093      	str	r3, [r2, #8]
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 8000360:	bf00      	nop
 8000362:	4b06      	ldr	r3, [pc, #24]	; (800037c <SysClock_init+0xf4>)
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	f003 0308 	and.w	r3, r3, #8
 800036a:	2b00      	cmp	r3, #0
 800036c:	d0f9      	beq.n	8000362 <SysClock_init+0xda>



}
 800036e:	bf00      	nop
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	40023800 	.word	0x40023800
 8000380:	40023c00 	.word	0x40023c00

08000384 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000384:	480d      	ldr	r0, [pc, #52]	; (80003bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000386:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000388:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800038c:	480c      	ldr	r0, [pc, #48]	; (80003c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800038e:	490d      	ldr	r1, [pc, #52]	; (80003c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000390:	4a0d      	ldr	r2, [pc, #52]	; (80003c8 <LoopForever+0xe>)
  movs r3, #0
 8000392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000394:	e002      	b.n	800039c <LoopCopyDataInit>

08000396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039a:	3304      	adds	r3, #4

0800039c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800039c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800039e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a0:	d3f9      	bcc.n	8000396 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a2:	4a0a      	ldr	r2, [pc, #40]	; (80003cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a4:	4c0a      	ldr	r4, [pc, #40]	; (80003d0 <LoopForever+0x16>)
  movs r3, #0
 80003a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a8:	e001      	b.n	80003ae <LoopFillZerobss>

080003aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003ac:	3204      	adds	r2, #4

080003ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b0:	d3fb      	bcc.n	80003aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003b2:	f000 f811 	bl	80003d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003b6:	f7ff ff25 	bl	8000204 <main>

080003ba <LoopForever>:

LoopForever:
    b LoopForever
 80003ba:	e7fe      	b.n	80003ba <LoopForever>
  ldr   r0, =_estack
 80003bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003c8:	08000440 	.word	0x08000440
  ldr r2, =_sbss
 80003cc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003d0:	2000001c 	.word	0x2000001c

080003d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d4:	e7fe      	b.n	80003d4 <ADC_IRQHandler>
	...

080003d8 <__libc_init_array>:
 80003d8:	b570      	push	{r4, r5, r6, lr}
 80003da:	4d0d      	ldr	r5, [pc, #52]	; (8000410 <__libc_init_array+0x38>)
 80003dc:	4c0d      	ldr	r4, [pc, #52]	; (8000414 <__libc_init_array+0x3c>)
 80003de:	1b64      	subs	r4, r4, r5
 80003e0:	10a4      	asrs	r4, r4, #2
 80003e2:	2600      	movs	r6, #0
 80003e4:	42a6      	cmp	r6, r4
 80003e6:	d109      	bne.n	80003fc <__libc_init_array+0x24>
 80003e8:	4d0b      	ldr	r5, [pc, #44]	; (8000418 <__libc_init_array+0x40>)
 80003ea:	4c0c      	ldr	r4, [pc, #48]	; (800041c <__libc_init_array+0x44>)
 80003ec:	f000 f818 	bl	8000420 <_init>
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	10a4      	asrs	r4, r4, #2
 80003f4:	2600      	movs	r6, #0
 80003f6:	42a6      	cmp	r6, r4
 80003f8:	d105      	bne.n	8000406 <__libc_init_array+0x2e>
 80003fa:	bd70      	pop	{r4, r5, r6, pc}
 80003fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000400:	4798      	blx	r3
 8000402:	3601      	adds	r6, #1
 8000404:	e7ee      	b.n	80003e4 <__libc_init_array+0xc>
 8000406:	f855 3b04 	ldr.w	r3, [r5], #4
 800040a:	4798      	blx	r3
 800040c:	3601      	adds	r6, #1
 800040e:	e7f2      	b.n	80003f6 <__libc_init_array+0x1e>
 8000410:	08000438 	.word	0x08000438
 8000414:	08000438 	.word	0x08000438
 8000418:	08000438 	.word	0x08000438
 800041c:	0800043c 	.word	0x0800043c

08000420 <_init>:
 8000420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000422:	bf00      	nop
 8000424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000426:	bc08      	pop	{r3}
 8000428:	469e      	mov	lr, r3
 800042a:	4770      	bx	lr

0800042c <_fini>:
 800042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042e:	bf00      	nop
 8000430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000432:	bc08      	pop	{r3}
 8000434:	469e      	mov	lr, r3
 8000436:	4770      	bx	lr
